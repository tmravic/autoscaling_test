name: Manage CloudFormation Stack

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform: plan, apply, destroy'
        required: true
        default: 'plan'
      stack_name:
        description: 'CloudFormation Stack Name'
        required: true
        default: 'tac-network-stack'
      template_file:
        description: 'Path to template file'
        required: false
        default: 'network.yaml'

env:
  AWS_REGION: ap-northeast-1

jobs:
  cf_action:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Validate Template
        if: ${{ github.event.inputs.action != 'destroy' }}
        run: |
          aws cloudformation validate-template \
            --template-body file://${{ github.event.inputs.template_file }}

      - name: Plan Changes (Create Change Set)
        if: ${{ github.event.inputs.action == 'plan' }}
        run: |
          CHANGE_SET_NAME="preview-$(date +%s)"
          aws cloudformation create-change-set \
            --stack-name ${{ github.event.inputs.stack_name }} \
            --template-body file://${{ github.event.inputs.template_file }} \
            --change-set-name $CHANGE_SET_NAME \
            --capabilities CAPABILITY_NAMED_IAM

          aws cloudformation wait change-set-create-complete \
            --stack-name ${{ github.event.inputs.stack_name }} \
            --change-set-name $CHANGE_SET_NAME

          aws cloudformation describe-change-set \
            --stack-name ${{ github.event.inputs.stack_name }} \
            --change-set-name $CHANGE_SET_NAME \
            --query "Changes[*].ResourceChange" \
            --output table

      - name: Apply Stack (Deploy)
        if: ${{ github.event.inputs.action == 'apply' }}
        run: |
          aws cloudformation deploy \
            --template-file ${{ github.event.inputs.template_file }} \
            --stack-name ${{ github.event.inputs.stack_name }} \
            --capabilities CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset

      - name: Destroy Stack
        if: ${{ github.event.inputs.action == 'destroy' }}
        run: |
          aws cloudformation delete-stack \
            --stack-name ${{ github.event.inputs.stack_name }}
